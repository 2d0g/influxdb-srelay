###############################
##
## InfluxDB Single instances Config
##
###############################

# InfluxDB Backend InfluxDB01
[[influxdb]]
  name = "influxdb01"
  location = "http://127.0.0.1:8086/"
  timeout = "10s"

# InfluxDB Backend InfluxDB02
[[influxdb]]
  name = "influxdb02"
  location = "http://127.0.0.1:8087/"
  timeout = "10s"


#################################
##
## InfluxDB Cluster Configs as a set 
## of influxdb Single Instances
##
################################# 


# Cluster for MQ Metrics
[[influxcluster]]
  # name = cluster id for route configs and logs
  name  = "cluster_linux"
  # members = array of influxdb backends
  members = ["influxdb01"]
  # where to write logs for all  operations in the cluster
  log-file = "logs/cluster_linux.log"
  # log level could be
  # "panic","fatal","Error","warn","info","debug"
  log-level = "debug"
  # mode = of query and send data
  # * HA : 
  #       input write data will be sent to all members
  #       queries will be sent  on the active node with 
  #       data if query-router-endpoint-api config exist, else the first
  # * Single:
  #       input write data will be sent on the first member ( should be only one)
  #     query will be sent on  the only first member (should be only one)
  # * LB:  // NOT IMPLEMENTED YET //
  type = "Single"
  # the API to query on each input query
  #  rate-limit
  rate-limit = 1  
  burst-limit =  1
  default-ping-response-code = 200

# Cluster for WeblogicServer Metrics
[[influxcluster]]
  name  = "cluster_windows"
  members = ["influxdb01","influxdb02"]
  log-file = "logs/cluster_windows.log"
  log-level = "debug"
  type = "HA"
  rate-limit = 1000
  burst-limit =  1000
  query-router-endpoint-api = ["http://127.0.0.1:4090/api/queryactive","http://127.0.0.1:4090/api/queryactive"]

# Cluster for Container As A Service Metrics
[[influxcluster]]
  name  = "cluster_caas"
  members = ["influxdb02"]
  log-file = "logs/cluster_caas.log"
  log-level = "debug"
  type = "HA"
  rate-limit = 1000
  burst-limit =  1000

# Cluster for filtering metrics
[[influxcluster]]

  name = "__sinc__"


# HTTP Server
[[http]]
  name = "example-http-influxdb"
  bind-addr = "0.0.0.0:9096"
  log-file = "logs/http_example_influxdb.log"
  log-level = "debug"

  rate-limit = 1000000
  burst-limit = 2000000

  ## Define endpoints base config
  ## endpoints can have read and write properties

  ####### READ ######
  ## Read property that matchees all uri with a single pattern and contains a group of routes
  ## Each route can have multiple config that allows actions:
  ##  - pass: the request just passes through
  ##  - route: last rule to be applied, it routes to an influxdbcluster
  ##  - rename
  ##    - rename_http | http -> http
  ##    - rename_data_http | http -> data
  ##    - rename_http_data | data -> http
  ##    - rename_data | data -> data

  ## Example: /query endpoint
  ## There are 2 routes that must do a read query  against a cluster
  ## It expects that each HTTP request tries each route. If it fits the filter it will be enrouted
  ## All requests that doesn't pass through  the filter tries the next route


  #
  # IQL /query Endpoint
  #
  [[http.endpoint]]
    uri=["/query"]
    # type
    #  * RD = http for query db
    #  * WR = http for send data to the db
    type="RD"
    # source_format 
    # Supported formats
    # * ILP = influxdb-line-protocol
    # * prom-write = prometheus write format
    # * IQL = Influx Query Language
    source_format="IQL"

    ## READ request - MQ_METRICS
    [[http.endpoint.route]]
      name="mq_metrics"
      level="http" # http or data

      ## Filter only the request with db param = mq_metrics
      [[http.endpoint.route.filter]]
        name="pass_linux_metrics"
        action="pass"
        key="db" #availabe http params
        match="mq_metrics"

      ## Rule to route to cluster_linux
      [[http.endpoint.route.rule]]
        name="mq_metrics"
        action="route"
        key="db"
        match="mq_metrics"
        value="cluster_linux" #send_to = "cluster_linux"

      ## Query  request - CAAS_METRICS
    [[http.endpoint.route]]
      name="telegraf_test"
      level="http" # http or data

      [[http.endpoint.route.filter]]
        name="telegraf_metrics_filter"
        action="pass"
        key="db"
        match="telegraf"

      ## Simple rule that routes to influxcluster
      [[http.endpoint.route.rule]]
        name="telegraf_metrics_rule"
        action="route"
        key="db"
        match=".*"
        value="cluster_windows" #send_to = "caas_cluster"

      ## READ request - CAAS_METRICS
    [[http.endpoint.route]]
      name="caas_metrics"
      level="http" # http or data

      [[http.endpoint.route.filter]]
        name="pass_caas_metrics"
        action="pass"
        key="ip"
        match="grafana-ip"

      ## Simple rule that routes to influxcluster
      [[http.endpoint.route.rule]]
        name="caas_metrics"
        action="route"
        key="db"
        match=".*"
        value="cluster_caas" #send_to = "caas_cluster"



  # 
  #
  # IQL /write Endpoint 

  [[http.endpoint]]
    uri=["/write"]
    source_format="ILP"
    type = "WR"
    
    ## WRITE request - WLS
    [[http.endpoint.route]]
      name="wls_filter"
      level="http"

      [[http.endpoint.route.filter]]
        name="pass_windows_metrics"
        action="pass"
        key="db"
        match="wls_metrics"

      ## Send to PMEREASP15 cluster
      [[http.endpoint.route.rule]]
        name="route_windows_metrics"
        action="route"
        key="db"
        match=".*"
        value="cluster_windows"


    
    
    ## WRITE request -  to MQ_METRICS
    [[http.endpoint.route]]
      name="mq_filter"
      level="data"  # we can scan on measurements/tags/fields 

      ## match only points in database mq_metrics
      [[http.endpoint.route.filter]]
        name="pass_linux_metrics"
        action="pass"
        key="db"
        match="mq_metrics"

      ## Send to MQ cluster if measurement  match "mq_ISS.*"
      [[http.endpoint.route.rule]]
        name="route_linux_metrics"
        action="route"
        key="measurement"
        match="mq_IIS.*"
        value="cluster_linux"

      ## Send to MQ cluster if measurement match "mq_statistics"
      [[http.endpoint.route.rule]]
        name="route_linux_metrics"
        action="route"
        key="measurement"
        match="mq_statistics"
        value="cluster_linux"

      ## Any other measurements in 

    # TELEGRAF TO CLUSTER WLS
    [[http.endpoint.route]]
      name="telegraf"
      level="http"

      [[http.endpoint.route.filter]]
        name="pass_all_tele"
        action="pass"
        key="db"
        match="tele.*"

      ## Send to __SINC__ cluster, 
      [[http.endpoint.route.rule]]
        name="sinc_other"
        action="route"
        key="db"
        match="telegraf"
        value="cluster_windows"


    ## WRITE request - ALL that it doesn't match go to sinc!
    [[http.endpoint.route]]
      name="other_sinc"
      level="http"

      [[http.endpoint.route.filter]]
        name="pass_all"
        action="pass"
        key="db"
        match=".*"

      ## Send to __SINC__ cluster, 
      [[http.endpoint.route.rule]]
        name="sinc_other"
        action="route"
        key="db"
        match=".*"
        value="__sinc__"
      #
    

  #
  #
  # Prometheus /api/v1/prom/write ENDPOINT

  [[http.endpoint]]
    uri=["/api/v1/prom/write"]
    source_format="prom-write"
    type = "WR"
        
    ## WRITE request - CAAS_METRICS
    [[http.endpoint.route]]
      name="caas_metrics"
      level="data"

    ## Filter only CAAS METRICS and let pass to the following config
      [[http.endpoint.route.filter]]
        name="pass_caas_metrics"
        action="pass"
        key="db"
        match="caas_metrics"

      ## Change database based on tag
      [[http.endpoint.route.rule]]
        name="to_cluster_caas"
        action="route"
        key="db"
        match=".*"
        value="cluster_caas_platform"

      ## Change database based on tag
      [[http.endpoint.route.rule]]
        name="to_namespace_metrics"
        action="rename_data_http"
        key="namespace"
        match="^...-(.*)-[pro|pre|tst]$"
        key_dest="db"
        value="$1"

      ## Change database based on tag
      [[http.endpoint.route.rule]]
        name="to_cluster_caas"
        action="route"
        key="db"
        match=".*"
        value="cluster_caas"

    ## WRITE request - ALL that it doesn't match go to sinc!
    [[http.endpoint.route]]
      name="other_sinc"
      level="http"

      [[http.endpoint.route.filter]]
        name="pass_all"
        action="pass"
        key="db"
        match=".*"
            
      ## Send to PMEREASP15 cluster
      [[http.endpoint.route.rule]]
        name="sinc_other"
        action="route"
        key="db"
        match=".*"
        value="__sinc__"



  #####